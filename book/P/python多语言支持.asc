= python多语言支持

python多语言支持使用gettext, 主要分为两个部分: 根据po文件生成mo文件，使用mo文件实现多语言。

== 生成po文件

po文件可以使用 `xgettext -d foo -o locales/foo.pot foo.py` 从代码生成

foo.py的写法如下
[console, python]
-----
import  gettext
_ = gettext.gettext

_("你好")
-----monake

生成的pot文件如下
[console, txt]
-----
# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-17 16:54+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "你好"
msgstr ""
-----

添加翻译
[console, txt]
-----
msgid "你好"
msgstr "hello"
-----

直接将pot重名为po即可

[TIP]

    可以使用这种方式生成po文件，也可以自己根据文件格式手写。 
    如果需要使用 `Content-Type` 这样的类似于请问头的属性，最前面的 'msgid ""
    msgstr ""' 需要保留


== 生成mo文件

使用 `msgfmt -o locale/foo/LC_MESSAGES/foo.mo foo.po` 生成mo文件

[TIP]
    mo文件的目录层级是固定的，其中 `LC_MESSAGES` 是固定文件夹名，如果需要添加多个语言的支持，则在 `locale` 下添加 `bar/LC_MESSAGES/bar.mo` 即可


== 使用mo文件完成多语言支持

[console, python]
-----
import  gettext

lang_translations = gettext.translation('foo', localedir='locale', languages=['foo'])
lang_translations.install()
# define _ shortcut for translations
_ = lang_translations.gettext

# mark a string translatable
print(_("你好"))

-----