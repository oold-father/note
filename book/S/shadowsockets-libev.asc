[#shadowsockets-libev]
=== shadowsockets-libev

shadowsockets使用的算法已经过时, 服务器容易被墙, 使用shadowsockets-libev的新算法可以避免被墙

==== 服务端

===== 开启bbr

[console,bash]
----
cat << EOF > install.sh
# 1. 第一阶段，安装最新版内核以支持tcp_bbr

rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
dnf install -y https://www.elrepo.org/elrepo-release-8.el8.elrepo.noarch.rpm
dnf --enablerepo=elrepo-kernel install -y kernel-ml

lastest_kernel=`grep "menuentry 'CentOS Linux" /boot/grub2/grub.cfg|awk -F "'" '{print $2}'|head -n 1`

grub2-set-default "$lastest_kernel"

rm -f /boot/grub2/grub.cfg.bak
cp /boot/grub2/grub.cfg /boot/grub2/grub.cfg.bak
grub2-mkconfig -o /boot/grub2/grub.cfg

#reboot

# 2. 第二阶段，设置并启用tcp_bbr模块及其参数
# 开机后 uname -r 看看是不是内核 >= 4.9。
uname -r

# 加载内核模块
modprobe tcp_bbr
echo "tcp_bbr" | tee --append /etc/modules-load.d/modules.conf
# 确认加载
lsmod | grep bbr

# 设置网络参数
echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf
# 生效配置
sysctl -p

# 检验参数。如果结果都有 bbr，则证明你的内核已开启 BBR。
sysctl net.ipv4.tcp_available_congestion_control
sysctl net.ipv4.tcp_congestion_control

EOF

sh install.sh
----
===== 安装

===== 安装
[console,bash]
----
dnf install -y git gettext gcc make autoconf libtool openssl-devel automake libsodium-devel zlib-devel pcre-devel libev-devel udns-devel mbedtls-devel c-ares-devel asciidoc xmlto
git clone https://github.com/shadowsocks/shadowsocks-libev.git
cd shadowsocks-libev
git submodule update --init
sh ./autogen.sh
./configure --prefix=/usr/local/shadowsocks-libev

make && make install
----

===== 配置

.shadowsocks-libev配置
`server_port` 为ss服务端口,`password` 为服务密码,建议设置16位随机密码<<password>>
[console,bash]
----
cat << EOF >/etc/shadowsocks.json
{
    "server":"0.0.0.0",
    "server_port":$server_port,
    "password":"$password",
    "timeout":300,
    "method":"chacha20-ietf-poly1305",
    "fast_open":false,
    "workers":3
}
EOF

----

.shadowsocks-libev服务
[console,bash]
----
cat <<EOF > /usr/lib/systemd/system/shadowsocks.service
[Unit]
Description=Shadowsocks Service
After=network.target

[Service]
Type=simple
User=nobody
PIDFile=/tmp/shadowsocks.pid
ExecStart=/usr/local/shadowsocks-libev/bin/ss-server -c /etc/shadowsocks.json -f /tmp/shadowsocks.pid -v

[Install]
WantedBy=multi-user.target

EOF

----

.启动ss服务
[console,bash]
----
systemctl enable shadowsocks
systemctl start shadowsocks
systemctl status shadowsocks
----

===== 关闭防火墙
[console,bash]
----
systemctl stop firewalld
systemctl disable firewalld
----

==== 客户端

===== 安装
.Arch Linux
[console,bash]
----
pacman -S shadowsocks-libev
----

===== 配置

.shadowsocks-libev配置
这里 `ip` 是服务器ip,`port` 是你的ss服务端口,`password` 是服务端密码,自行设置
[console,bash]
----
mkdir /etc/shadowsocks
cat << EOF >/etc/shadowsocks/default.json
{
    "server": $ip,
    "server_port": $port,
    "local_address": "0.0.0.0",
    "local_port": 1080,
    "password": $password,
    "timeout": 300,
    "method": "chacha20-ietf-poly1305",
    "fast_open": false,
    "workers": 3,
    "prefer_ipv6": false
}
EOF
----

.shadowsocks-libev服务
[console,bash]
----
cat << EOF > /usr/lib/systemd/system/shadowsocks-libev@.service
[Unit]
Description=Shadowsocks-Libev Client Service
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
User=nobody
CapabilityBoundingSet=CAP_NET_BIND_SERVICE
ExecStart=/usr/bin/ss-local -c /etc/shadowsocks/%i.json

[Install]
WantedBy=multi-user.target
EOF

----

.启动ss服务
[console,bash]
----
systemctl enable shadowsocks-libev@default
systemctl start shadowsocks-libev@default
systemctl status shadowsocks-libev@default
[console,bash]
----